name: Artifacts

on:
  workflow_call:
    inputs:
      publish:
        description: Publish artifacts to the artifact store
        default: false
        required: false
        type: boolean
    outputs:
      controller-image-name:
        description: Controller image name
        value: ${{ jobs.controller-image.outputs.name }}
      controller-image-digest:
        description: Controller image digest
        value: ${{ jobs.controller-image.outputs.digest }}
      controller-image-ref:
        description: Controller image ref
        value: ${{ jobs.controller-image.outputs.ref }}
      refresher-image-name:
        description: Refresher image name
        value: ${{ jobs.refresher-image.outputs.name }}
      refresher-image-digest:
        description: Refresher image digest
        value: ${{ jobs.refresher-image.outputs.digest }}
      refresher-image-ref:
        description: Refresher image ref
        value: ${{ jobs.refresher-image.outputs.ref }}

permissions:
  contents: read

jobs:
  controller-image:
    name: Controller image
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        target: [ "distroless", "ubi8" ]

    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write

    outputs:
      name: ${{ steps.image-name.outputs.value }}
      digest: ${{ steps.build.outputs.digest }}
      ref: ${{ steps.image-ref.outputs.value }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@83b7061638ee4956cf7545a6f7efe594e5ad0247 # v3.5.1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18 # v2.1.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@4b4e9c3e2d4531116a6f8ba8e71fc6e2cb6e6c8c # v2.5.0

      - name: Set up Cosign
        uses: sigstore/cosign-installer@d13028333d784fcc802b67ec924bcebe75aa0a5f # v3.0.2
        with:
          cosign-release: v2.0.1
        if: inputs.publish

      - name: Set up Syft
        uses: anchore/sbom-action/download-syft@422cb34a0f8b599678c41b21163ea6088edb2624 # v0.14.1
        with:
          syft-version: v0.76.1

      - name: Set image name
        id: image-name
        run: echo "value=ghcr.io/${{ github.repository_owner }}/imagepullsecrets" >> "$GITHUB_OUTPUT"

      - name: Gather build metadata
        id: meta
        uses: docker/metadata-action@c4ee3adeed93b1fa6a762f209fb01608c1a22f1e # v4.4.0
        with:
          images: ${{ steps.image-name.outputs.value }}
          flavor: |
            latest = false
          tags: |
            type=ref,event=branch,suffix=-${{ matrix.target }}
            type=ref,event=pr,suffix=-${{ matrix.target }}
            type=semver,pattern={{raw}},suffix=-${{ matrix.target }}
            type=semver,pattern={{raw}},enable=${{ matrix.target == 'distroless' }}
            type=raw,value=latest,suffix=-${{ matrix.target }},enable=${{ github.ref_name == github.event.repository.default_branch }}
            type=raw,value=latest,enable=${{ github.ref_name == github.event.repository.default_branch && matrix.target == 'distroless' }}

      # Multiple exporters are not supported yet
      # See https://github.com/moby/buildkit/pull/2760
      - name: Determine build output
        uses: haya14busa/action-cond@1d6e8a12b20cdb4f1954feef9aa475b9c390cab5 # v1.1.1
        id: build-output
        with:
          cond: ${{ inputs.publish }}
          if_true: type=image,push=true
          if_false: type=oci,dest=image.tar

      # UBI8 does not support ARMv7
      - name: Determine platforms
        uses: haya14busa/action-cond@1d6e8a12b20cdb4f1954feef9aa475b9c390cab5 # v1.1.1
        id: platforms
        with:
          cond: ${{ matrix.target == 'ubi8' }}
          if_true: linux/amd64,linux/arm64
          if_false: linux/amd64,linux/arm64,linux/arm/v7

      - name: Login to GitHub Container Registry
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
        if: inputs.publish

      - name: Build and push image
        id: build
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671 # v4.0.0
        with:
          context: .
          target: ${{ matrix.target }}
          platforms: ${{ steps.platforms.outputs.value }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: ${{ steps.build-output.outputs.value }}
          # push: ${{ inputs.publish }}

      - name: Set image ref
        id: image-ref
        run: echo "value=${{ steps.image-name.outputs.value }}@${{ steps.build.outputs.digest }}" >> "$GITHUB_OUTPUT"

      - name: Fetch image
        run: skopeo --insecure-policy copy docker://${{ steps.image-ref.outputs.value }} oci-archive:image.tar
        if: inputs.publish

      - name: Extract OCI tarball
        run: |
          mkdir -p image
          tar -xf image.tar -C image

      # See https://github.com/anchore/syft/issues/1545
      - name: Extract image from multi-arch image
        run: skopeo --override-os linux --override-arch amd64 --insecure-policy copy oci:image docker-archive:docker.tar

      - name: Generate SBOM
        run: syft -o spdx-json=sbom-spdx.json docker-archive:docker.tar

      - name: Upload SBOM as artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: "[${{ github.job }}] SBOM"
          path: sbom-spdx.json
          retention-days: 5

      - name: Sign image
        run: |
          cosign sign --yes --recursive "${{ steps.image-ref.outputs.value }}"
          echo "::notice title=Verify signature::cosign verify --certificate-identity 'https://github.com/${{ github.workflow_ref }}' --certificate-oidc-issuer 'https://token.actions.githubusercontent.com' ${{ steps.image-ref.outputs.value }}"
          echo "::notice title=Verify signature(pretty print)::cosign verify --certificate-identity 'https://github.com/${{ github.workflow_ref }}' --certificate-oidc-issuer 'https://token.actions.githubusercontent.com' ${{ steps.image-ref.outputs.value }} | jq '.[0]'"
        if: inputs.publish

      - name: Attach SBOM attestation
        run: |
          cosign attest --yes --predicate sbom-spdx.json --type spdx "${{ steps.image-ref.outputs.value }}"
          echo "::notice title=Verify SBOM attestation::cosign verify-attestation --certificate-identity 'https://github.com/${{ github.workflow_ref }}' --certificate-oidc-issuer 'https://token.actions.githubusercontent.com' --type spdx ${{ steps.image-ref.outputs.value }}"
          echo "::notice title=Inspect SBOM::cosign verify-attestation --certificate-identity 'https://github.com/${{ github.workflow_ref }}' --certificate-oidc-issuer 'https://token.actions.githubusercontent.com' --type spdx ${{ steps.image-ref.outputs.value }} | jq '.payload |= @base64d | .payload | fromjson | select(.predicateType == \"https://spdx.dev/Document\") | .predicate | fromjson'"
        if: inputs.publish

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@e5f43133f6e8736992c9f3c1b3296e24b37e17f2 # 0.10.0
        with:
          input: image
          format: sarif
          output: trivy-results.sarif

      - name: Upload Trivy scan results as artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: "[${{ github.job }}] Trivy scan results"
          path: trivy-results.sarif
          retention-days: 5

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@6c089f53dd51dc3fc7e599c3cb5356453a52ca9e # v2.20.0
        with:
          sarif_file: trivy-results.sarif

  refresher-image:
    name: Refresher image
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        target: [ "distroless", "ubi8" ]

    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write

    outputs:
      name: ${{ steps.image-name.outputs.value }}
      digest: ${{ steps.build.outputs.digest }}
      ref: ${{ steps.image-ref.outputs.value }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@83b7061638ee4956cf7545a6f7efe594e5ad0247 # v3.5.1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18 # v2.1.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@4b4e9c3e2d4531116a6f8ba8e71fc6e2cb6e6c8c # v2.5.0

      - name: Set up Cosign
        uses: sigstore/cosign-installer@d13028333d784fcc802b67ec924bcebe75aa0a5f # v3.0.2
        with:
          cosign-release: v2.0.1
        if: inputs.publish

      - name: Set up Syft
        uses: anchore/sbom-action/download-syft@422cb34a0f8b599678c41b21163ea6088edb2624 # v0.14.1
        with:
          syft-version: v0.76.1

      - name: Set image name
        id: image-name
        run: echo "value=ghcr.io/${{ github.repository_owner }}/imagepullsecrets-refresher" >> "$GITHUB_OUTPUT"

      - name: Gather build metadata
        id: meta
        uses: docker/metadata-action@c4ee3adeed93b1fa6a762f209fb01608c1a22f1e # v4.4.0
        with:
          images: ${{ steps.image-name.outputs.value }}
          flavor: |
            latest = false
          tags: |
            type=ref,event=branch,suffix=-${{ matrix.target }}
            type=ref,event=pr,suffix=-${{ matrix.target }}
            type=semver,pattern={{raw}},suffix=-${{ matrix.target }}
            type=semver,pattern={{raw}},enable=${{ matrix.target == 'distroless' }}
            type=raw,value=latest,suffix=-${{ matrix.target }},enable=${{ github.ref_name == github.event.repository.default_branch }}
            type=raw,value=latest,enable=${{ github.ref_name == github.event.repository.default_branch && matrix.target == 'distroless' }}

      # Multiple exporters are not supported yet
      # See https://github.com/moby/buildkit/pull/2760
      - name: Determine build output
        uses: haya14busa/action-cond@1d6e8a12b20cdb4f1954feef9aa475b9c390cab5 # v1.1.1
        id: build-output
        with:
          cond: ${{ inputs.publish }}
          if_true: type=image,push=true
          if_false: type=oci,dest=image.tar

      # UBI8 does not support ARMv7
      - name: Determine platforms
        uses: haya14busa/action-cond@1d6e8a12b20cdb4f1954feef9aa475b9c390cab5 # v1.1.1
        id: platforms
        with:
          cond: ${{ matrix.target == 'ubi8' }}
          if_true: linux/amd64,linux/arm64
          if_false: linux/amd64,linux/arm64,linux/arm/v7

      - name: Login to GitHub Container Registry
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
        if: inputs.publish

      - name: Build and push image
        id: build
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671 # v4.0.0
        with:
          context: .
          file: Dockerfile-refresher
          target: ${{ matrix.target }}
          platforms: ${{ steps.platforms.outputs.value }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: ${{ steps.build-output.outputs.value }}
          # push: ${{ inputs.publish }}

      - name: Set image ref
        id: image-ref
        run: echo "value=${{ steps.image-name.outputs.value }}@${{ steps.build.outputs.digest }}" >> "$GITHUB_OUTPUT"

      - name: Fetch image
        run: skopeo --insecure-policy copy docker://${{ steps.image-ref.outputs.value }} oci-archive:image.tar
        if: inputs.publish

      - name: Extract OCI tarball
        run: |
          mkdir -p image
          tar -xf image.tar -C image

      # See https://github.com/anchore/syft/issues/1545
      - name: Extract image from multi-arch image
        run: skopeo --override-os linux --override-arch amd64 --insecure-policy copy oci:image docker-archive:docker.tar

      - name: Generate SBOM
        run: syft -o spdx-json=sbom-spdx.json docker-archive:docker.tar

      - name: Upload SBOM as artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: "[${{ github.job }}] SBOM"
          path: sbom-spdx.json
          retention-days: 5

      - name: Sign image
        run: |
          cosign sign --yes --recursive "${{ steps.image-ref.outputs.value }}"
          echo "::notice title=Verify signature::cosign verify --certificate-identity 'https://github.com/${{ github.workflow_ref }}' --certificate-oidc-issuer 'https://token.actions.githubusercontent.com' ${{ steps.image-ref.outputs.value }}"
          echo "::notice title=Verify signature(pretty print)::cosign verify --certificate-identity 'https://github.com/${{ github.workflow_ref }}' --certificate-oidc-issuer 'https://token.actions.githubusercontent.com' ${{ steps.image-ref.outputs.value }} | jq '.[0]'"
        if: inputs.publish

      - name: Attach SBOM attestation
        run: |
          cosign attest --yes --predicate sbom-spdx.json --type spdx "${{ steps.image-ref.outputs.value }}"
          echo "::notice title=Verify SBOM attestation::cosign verify-attestation --certificate-identity 'https://github.com/${{ github.workflow_ref }}' --certificate-oidc-issuer 'https://token.actions.githubusercontent.com' --type spdx ${{ steps.image-ref.outputs.value }}"
          echo "::notice title=Inspect SBOM::cosign verify-attestation --certificate-identity 'https://github.com/${{ github.workflow_ref }}' --certificate-oidc-issuer 'https://token.actions.githubusercontent.com' --type spdx ${{ steps.image-ref.outputs.value }} | jq '.payload |= @base64d | .payload | fromjson | select(.predicateType == \"https://spdx.dev/Document\") | .predicate | fromjson'"
        if: inputs.publish

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@e5f43133f6e8736992c9f3c1b3296e24b37e17f2 # 0.10.0
        with:
          input: image
          format: sarif
          output: trivy-results.sarif

      - name: Upload Trivy scan results as artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: "[${{ github.job }}] Trivy scan results"
          path: trivy-results.sarif
          retention-days: 5

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@6c089f53dd51dc3fc7e599c3cb5356453a52ca9e # v2.20.0
        with:
          sarif_file: trivy-results.sarif
